# TLA+ Specification to Trace Validation Configuration Generator

## Task Objective

You need to analyze a given TLA+ specification and generate a corresponding trace validation configuration file for verifying execution traces against the specification.

## Input

- TLA+ specification file content

## Output Requirements

Generate a YAML format configuration file containing the following sections:

### 1. Basic Information
- `spec_name`: Specification module name (extracted from MODULE declaration)

### 2. Constants Definition (constants)
- Analyze CONSTANTS declarations and provide reasonable default values
- Node-related constants usually defined as string sets, e.g., '{"n1", "n2", "n3"}'
- Numeric limit constants set to small test values, e.g., '3'

### 3. Variables Definition (variables)
- Analyze VARIABLES declarations and Init operations
- Infer variable types based on initialization and type invariants:
  - `node_map_int`: Node to integer mapping (e.g., currentTerm, commitIndex)
  - `node_map_bool`: Node to boolean mapping (e.g., electionTimeout)
  - `node_map_sequence`: Node to sequence mapping (e.g., log)
  - `set`: Set type (e.g., messages)
  - `custom`: Complex types, need to provide default_value

### 4. Actions Definition (actions)
- **ONLY analyze the Next operation** to identify top-level actions
- Look for the main disjunction (∨) structure in Next
- Extract each disjunct as a separate action (ignore internal helper functions)
- Identify parameters for each action:
  - Parameters from existential quantifiers ∃ x ∈ Set
  - Use EXACT constant names from CONSTANTS declaration (e.g., if CONSTANTS defines "Server", use "Server"; if "Nodes", use "Nodes")
  - Parameters chosen from message set: `source: "messages"`

## Type Mapping Rules

1. **Node Mapping Type Inference**:
   - If variable initialized in Init as `[n \in Nodes |-> 0]` or similar integer → `node_map_int`
   - If variable initialized in Init as `[n \in Nodes |-> FALSE]` or boolean → `node_map_bool`
   - If variable initialized in Init as `[n \in Nodes |-> <<>>]` or sequence → `node_map_sequence`

2. **Complex Type Handling**:
   - Nested mappings (e.g., nextIndex, matchIndex) → `custom`, provide complete default_value
   - State enumeration types → `custom`, provide enumeration default
   - Set types (e.g., votes, messages) → corresponding type

3. **Action Parameter Identification**:
   - **CRITICAL**: Only analyze actions that appear directly in the Next operation's main disjunction
   - For each action, look for existential quantifiers (∃ x ∈ Set) to identify parameters
   - Use EXACT constant names from CONSTANTS declaration (e.g., if spec defines "Server", use "Server"; if "Nodes", use "Nodes")
   - Operations using `\E x \in ConstantName` → parameter x, source is "ConstantName" (use actual name from CONSTANTS)
   - Operations using `\E msg \in messages` → parameter msg, source is "messages"

## Output Format Requirements

The YAML configuration must have the following EXACT order:

1. **spec_name** (first)
2. **constants** (second) 
3. **variables** (third)
4. **actions** (last)

**CRITICAL**: You must analyze ONLY the Next operation's main disjunction structure. Include only the top-level actions that appear directly in Next, NOT internal helper functions.

## Example Output Format

```yaml
spec_name: "SpecificationName"

constants:
  - name: "Server"
    value: '{"n1", "n2", "n3"}'
  - name: "MaxLogLength"
    value: '3'

variables:
  - name: "currentTerm"
    default_type: "node_map_int"
  - name: "state"
    default_type: "custom"
    default_value: '[s \\in TraceServer |-> "Follower"]'
  - name: "messages"
    default_type: "set"

actions:
  - name: "BecomeCandidate"
    parameters:
      - name: "s"
        source: "Server"
  - name: "RequestVote"
    parameters:
      - name: "s"
        source: "Server"
  - name: "HandleVoteRequest"
    parameters:
      - name: "s"
        source: "Server"
      - name: "msg"
        source: "messages"
```

## Important Notes

1. **Precise Analysis**: Carefully read the CONSTANTS, VARIABLES, Init, and Next sections of the specification
2. **Type Inference**: Infer variable types based on Init operations and TypeInvariant (if present)
3. **Action Completeness**: Ensure all actions in Next operation are included
4. **Parameter Identification**: Accurately identify each action's parameters and their sources
5. **Default Value Reasonableness**: Provided default values should be suitable for testing and verification

Please analyze the given TLA+ specification and generate the corresponding configuration file.

**IMPORTANT: Return ONLY the YAML configuration content. Do not include explanations, comments, or markdown formatting. Start directly with the YAML content.** 