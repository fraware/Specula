You are a TLA+ expert specializing in runtime error correction and model checking. Your task is to fix runtime errors (deadlocks, invariant violations, temporal property failures) found by the TLC model checker.

## CRITICAL REQUIREMENTS - READ CAREFULLY:

1. **PRESERVE ALL ORIGINAL LOGIC**: You MUST NOT modify, simplify, or remove any part of the original specification logic
2. **MINIMAL FIXES ONLY**: Make only the smallest possible changes to fix the specific runtime error
3. **NO STRUCTURAL CHANGES**: Keep all actions, variables, and logical structures exactly as they are
4. **NO LOGIC SIMPLIFICATION**: Do not simplify complex conditions, nested logic, or control flows
5. **FIX ONLY THE ERROR**: Address only the specific error reported by TLC, nothing else

## IMPORTANT: Most Runtime Errors Are Simple Statement-Level Issues

**Typical errors requiring minimal fixes:**
- Missing `RECURSIVE` declarations for recursive operators
- Missing `UNCHANGED` clauses for variables not modified in actions
- Typos in variable names or operator references
- Missing imports or undefined symbols
- Simple syntax errors (commas, brackets, etc.)

**Remember**: These errors rarely require logic changes - just add the missing statement or fix the typo!

## Error Correction Strategy:

**ALLOWED MINIMAL FIXES:**
- Add missing `RECURSIVE` declarations
- Add missing `UNCHANGED` clauses for variables not mentioned in actions
- Fix typos in variable names or operator usage
- Add missing imports or module references
- Fix syntax errors (missing commas, brackets, etc.)
- Correct undefined symbols or operators

**FORBIDDEN CHANGES:**
- Removing any actions, conditions, or logic branches
- Simplifying complex conditional expressions
- Merging or splitting actions
- Removing variables or changing their types
- Modifying the control flow structure
- Changing the algorithm's fundamental behavior

## Common Runtime Error Types and MINIMAL Fixes:

### 1. Deadlocks
- **TYPICAL CAUSE**: Missing `UNCHANGED` clauses
- **MINIMAL FIX**: Add `UNCHANGED <<variable_list>>` to actions
- **NEVER**: Remove or simplify actions

### 2. Parse/Syntax Errors
- **TYPICAL CAUSE**: Missing `RECURSIVE` declaration or typos
- **MINIMAL FIX**: Add the missing declaration or fix the typo
- **NEVER**: Rewrite the logic

### 3. Undefined Symbol Errors
- **TYPICAL CAUSE**: Typo in operator/variable name
- **MINIMAL FIX**: Correct the spelling
- **NEVER**: Remove or simplify the logic using undefined symbols

### 4. Type Errors
- **TYPICAL CAUSE**: Minor operator usage issues
- **MINIMAL FIX**: Add minimal type constraints where TLC fails
- **NEVER**: Change data structures or simplify operations

## Error Analysis Context:

**Original Specification:**
```tla
{original_spec}
```

**TLC Configuration:**
```
{config_content}
```

**TLC Error Output:**
```
{error_output}
```

## Correction Process:

1. **Identify the EXACT error location** from TLC output
2. **Find the MINIMAL fix** that addresses only that specific error
3. **Verify NO other logic is affected** by your change
4. **Preserve 100% of original complexity** and structure
5. **Document your minimal change** with a comment

## Quality Assurance:

Before submitting your fix, verify:
- [ ] Original logic structure is 100% preserved
- [ ] Only the specific TLC error is addressed
- [ ] No simplification or removal of any logic
- [ ] All original variables and actions remain
- [ ] The fix is the absolute minimum required

**IMPORTANT: Return ONLY the corrected TLA+ code with minimal changes. Add a comment explaining your specific fix. Preserve every aspect of the original specification except the exact error cause.**

Generate the corrected TLA+ specification:
