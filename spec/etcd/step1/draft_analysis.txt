### FUNCTION CLASSIFICATION

**CORE FUNCTIONS (require detailed analysis):**
- `Step`: Main message processing entry point that handles all incoming Raft messages
- `stepLeader`: Leader-specific message handling for replication and coordination
- `stepCandidate`: Candidate/PreCandidate message handling for election process
- `stepFollower`: Follower-specific message handling and forwarding
- `becomeFollower`: State transition to follower role with term and leader updates
- `becomeCandidate`: State transition to candidate role with term increment
- `becomeLeader`: State transition to leader role with initialization
- `campaign`: Election initiation logic with vote request broadcasting
- `poll`: Vote counting and election result determination
- `maybeCommit`: Commit index advancement based on quorum agreement
- `handleAppendEntries`: Log replication processing and consistency checks
- `handleSnapshot`: Snapshot installation and state restoration
- `restore`: Complete state machine restoration from snapshot
- `appendEntry`: Leader log entry appending with uncommitted size tracking
- `maybeSendAppend`: Conditional append message sending with flow control

**SUPPORTING FUNCTIONS (brief summary):**
- `sendAppend`: Wrapper for maybeSendAppend - Abstract as message sending
- `maybeSendSnapshot`: Snapshot transmission logic - Abstract as network operation
- `sendHeartbeat`: Heartbeat message creation - Abstract as periodic messaging
- `bcastAppend`: Broadcast append to all peers - Abstract as network broadcast
- `bcastHeartbeat`: Broadcast heartbeat to all peers - Abstract as network broadcast
- `increaseUncommittedSize`: Uncommitted log size tracking - Model for flow control
- `reduceUncommittedSize`: Uncommitted log size reduction - Model for flow control
- `promotable`: Leadership eligibility check - Model as boolean condition
- `hasUnappliedConfChanges`: Configuration change detection - Model as scan operation
- `pastElectionTimeout`: Election timeout check - Abstract as timer condition
- `resetRandomizedElectionTimeout`: Timeout randomization - Abstract as timer reset

**INFRASTRUCTURE FUNCTIONS (to omit):**
- `send`: Message queuing and term validation - Omitted (networking)
- `tickElection`: Timer-based election triggering - Omitted (timer management)
- `tickHeartbeat`: Timer-based heartbeat triggering - Omitted (timer management)
- `newRaft`: Constructor with configuration validation - Omitted (initialization)
- `validate`: Configuration validation - Omitted (validation utility)
- `loadState`: Hard state loading - Omitted (persistence)
- `hardState`/`softState`: State accessors - Omitted (getters)

---

### DETAILED CORE FUNCTION ANALYSIS

### Step
- **Signature**: `func (r *raft) Step(m pb.Message) error`
- **Purpose**: Main message processing dispatcher that handles term comparison and delegates to role-specific handlers
- **Protocol Component**: Core Message Processing
- **Critical Logic**:
  • Condition: `m.Term > r.Term` → Action: Step down to follower or update term
  • Condition: `m.Term < r.Term` → Action: Reject or ignore based on message type
  • Condition: Vote messages with lease active → Action: Ignore vote requests
  • Condition: Message type specific → Action: Delegate to `r.step(r, m)`
- **Modeling Approach**: Full modeling required - central message processing logic

### stepLeader
- **Signature**: `func stepLeader(r *raft, m pb.Message) error`
- **Purpose**: Processes messages when node is in leader state, handling replication and client requests
- **Protocol Component**: Leader Replication Logic
- **Critical Logic**:
  • Condition: `MsgProp` with valid entries → Action: Append to log and broadcast
  • Condition: `MsgAppResp` with success → Action: Update progress and maybe commit
  • Condition: `MsgAppResp` with rejection → Action: Decrement next index and retry
  • Condition: `MsgHeartbeatResp` → Action: Update progress and send append if needed
  • Condition: Quorum not active → Action: Step down to follower
- **Modeling Approach**: Full modeling required - core replication and consensus logic

### stepCandidate
- **Signature**: `func stepCandidate(r *raft, m pb.Message) error`
- **Purpose**: Handles messages during candidate/pre-candidate state for election processing
- **Protocol Component**: Election Logic
- **Critical Logic**:
  • Condition: Vote response received → Action: Count votes via `poll()`
  • Condition: `quorum.VoteWon` → Action: Become leader or start real election
  • Condition: `quorum.VoteLost` → Action: Become follower
  • Condition: Append/heartbeat from leader → Action: Become follower
- **Modeling Approach**: Full modeling required - election state machine logic

### stepFollower
- **Signature**: `func stepFollower(r *raft, m pb.Message) error`
- **Purpose**: Processes messages when node is follower, forwarding requests and responding to leader
- **Protocol Component**: Follower Logic
- **Critical Logic**:
  • Condition: `MsgProp` with known leader → Action: Forward to leader
  • Condition: `MsgApp/MsgHeartbeat` → Action: Reset election timer and process
  • Condition: `MsgTimeoutNow` → Action: Start leadership transfer election
  • Condition: No leader for requests → Action: Drop proposals
- **Modeling Approach**: Full modeling required - follower state transitions

### becomeFollower
- **Signature**: `func (r *raft) becomeFollower(term uint64, lead uint64)`
- **Purpose**: Transitions node to follower state with term update and leader assignment
- **Protocol Component**: State Transition
- **Critical Logic**:
  • Action: Set `r.step = stepFollower`, `r.state = StateFollower`
  • Action: Call `r.reset(term)` to update term and clear vote
  • Action: Set `r.tick = r.tickElection` and `r.lead = lead`
- **Modeling Approach**: Full modeling required - critical state transition

### becomeCandidate
- **Signature**: `func (r *raft) becomeCandidate()`
- **Purpose**: Transitions node to candidate state with term increment and self-vote
- **Protocol Component**: State Transition
- **Critical Logic**:
  • Condition: Current state is leader → Action: Panic (invalid transition)
  • Action: Increment term via `r.reset(r.Term + 1)`
  • Action: Set `r.Vote = r.id` and `r.state = StateCandidate`
- **Modeling Approach**: Full modeling required - election initiation

### becomeLeader
- **Signature**: `func (r *raft) becomeLeader()`
- **Purpose**: Transitions node to leader state and initializes leader-specific state
- **Protocol Component**: State Transition
- **Critical Logic**:
  • Condition: Current state is follower → Action: Panic (invalid transition)
  • Action: Set `r.step = stepLeader`, `r.state = StateLeader`
  • Action: Initialize progress tracking and append empty entry
  • Action: Set `r.pendingConfIndex = r.raftLog.lastIndex()`
- **Modeling Approach**: Full modeling required - leadership initialization

### campaign
- **Signature**: `func (r *raft) campaign(t CampaignType)`
- **Purpose**: Initiates election by transitioning to candidate state and sending vote requests
- **Protocol Component**: Election Logic
- **Critical Logic**:
  • Condition: `campaignPreElection` → Action: Become pre-candidate, send pre-votes
  • Condition: `campaignElection` → Action: Become candidate, send votes
  • Action: Send vote requests to all voters with current log state
  • Action: Self-vote queued for after persistence
- **Modeling Approach**: Full modeling required - election initiation protocol

### poll
- **Signature**: `func (r *raft) poll(id uint64, t pb.MessageType, v bool) (granted int, rejected int, result quorum.VoteResult)`
- **Purpose**: Records vote and determines election outcome based on quorum calculation
- **Protocol Component**: Election Logic
- **Critical Logic**:
  • Action: Record vote via `r.trk.RecordVote(id, v)`
  • Action: Calculate result via `r.trk.TallyVotes()`
  • Return: Vote counts and quorum result (Won/Lost/Pending)
- **Modeling Approach**: Full modeling required - vote counting and quorum logic

### maybeCommit
- **Signature**: `func (r *raft) maybeCommit() bool`
- **Purpose**: Attempts to advance commit index based on majority agreement of match indices
- **Protocol Component**: Consensus Logic
- **Critical Logic**:
  • Condition: Leader only operation (implicit)
  • Action: Calculate new commit via `r.raftLog.maybeCommit(entryID{term: r.Term, index: r.trk.Committed()})`
  • Return: True if commit index advanced
- **Modeling Approach**: Full modeling required - core consensus advancement

### handleAppendEntries
- **Signature**: `func (r *raft) handleAppendEntries(m pb.Message)`
- **Purpose**: Processes append entries from leader, checking consistency and updating log
- **Protocol Component**: Log Replication
- **Critical Logic**:
  • Condition: `a.prev.index < r.raftLog.committed` → Action: Reply with committed index
  • Condition: Log consistency check passes → Action: Append entries and reply success
  • Condition: Log consistency fails → Action: Reply with conflict hint
  • Action: Use `findConflictByTerm` for efficient conflict resolution
- **Modeling Approach**: Full modeling required - log consistency and replication

### handleSnapshot
- **Signature**: `func (r *raft) handleSnapshot(m pb.Message)`
- **Purpose**: Processes snapshot message and attempts to restore state from snapshot
- **Protocol Component**: Snapshot Handling
- **Critical Logic**:
  • Action: Extract snapshot from message (handle nil case)
  • Condition: `r.restore(s)` succeeds → Action: Reply with last index
  • Condition: Restore fails → Action: Reply with committed index
- **Modeling Approach**: Full modeling required - snapshot installation protocol

### restore
- **Signature**: `func (r *raft) restore(s pb.Snapshot) bool`
- **Purpose**: Restores complete node state from snapshot including log and configuration
- **Protocol Component**: Snapshot Handling
- **Critical Logic**:
  • Condition: `s.Metadata.Index <= r.raftLog.committed` → Action: Return false (obsolete)
  • Condition: Node not in snapshot config → Action: Return false (safety check)
  • Condition: Log matches snapshot → Action: Fast-forward commit only
  • Action: Full restore with `r.raftLog.restore(s)` and config update
- **Modeling Approach**: Full modeling required - complete state restoration

### appendEntry
- **Signature**: `func (r *raft) appendEntry(es ...pb.Entry) (accepted bool)`
- **Purpose**: Appends entries to leader's log with uncommitted size limit enforcement
- **Protocol Component**: Log Management
- **Critical Logic**:
  • Action: Set term and index for all entries
  • Condition: `!r.increaseUncommittedSize(es)` → Action: Return false (size limit)
  • Action: Append via `r.raftLog.append(es...)` and send self-ack
- **Modeling Approach**: Full modeling required - log growth and flow control

### maybeSendAppend
- **Signature**: `func (r *raft) maybeSendAppend(to uint64, sendIfEmpty bool) bool`
- **Purpose**: Conditionally sends append message based on progress state and flow control
- **Protocol Component**: Replication Flow Control
- **Critical Logic**:
  • Condition: `pr.IsPaused()` → Action: Return false (flow control)
  • Condition: Entry retrieval fails → Action: Send snapshot instead
  • Condition: No entries and `!sendIfEmpty` → Action: Return false
  • Action: Send MsgApp and update progress tracking
- **Modeling Approach**: Full modeling required - replication flow control logic

---

### ESSENTIAL STATE VARIABLES:
- `state`: StateType - Current node role (Follower/Candidate/Leader/PreCandidate)
- `Term`: uint64 - Current term number for leader election
- `Vote`: uint64 - Node ID voted for in current term
- `lead`: uint64 - Current leader ID (None if unknown)
- `raftLog`: *raftLog - Replicated log with committed/applied indices
- `trk`: tracker.ProgressTracker - Replication progress and voter configuration
- `electionElapsed`: int - Ticks since last election timeout or leader contact
- `heartbeatElapsed`: int - Ticks since last heartbeat (leader only)
- `leadTransferee`: uint64 - Target for leadership transfer
- `pendingConfIndex`: uint64 - Index of pending configuration change
- `uncommittedSize`: entryPayloadSize - Size of uncommitted log entries
- `randomizedElectionTimeout`: int - Randomized election timeout value