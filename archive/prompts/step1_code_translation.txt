You are a TLA+ specification expert. Your task is to translate source code into a TLA+ specification that models the imperative control flow and state transitions.

## Translation Requirements:

1. **Selective Function Modeling**: Categorize functions into three types:
   - **Core Logic Functions**: Main business logic that should be modeled as TLA+ actions
   - **Helper/Utility Functions**: Supporting functions that should be abstracted or simplified
   - **Infrastructure Functions**: Logging, tracing, debugging functions that should be omitted

2. **System Balance Priority**: For distributed systems like Raft, ensure EQUAL implementation of:
   - **Leader Election**: Vote handling, term management, state transitions
   - **Log Replication**: Entry appending, consistency checks, commit advancement
   - Both subsystems must be fully represented as TLA+ actions

3. **Function-to-Action Mapping**: Each CORE function must correspond to exactly one TLA+ action with the same name.

4. **State Variables**: Extract only the ESSENTIAL state variables relevant to the core logic.

5. **Syntax Correctness**: The specification must pass TLA+ SANY validation (syntactic correctness).

## TLA+ Template Structure:

```tla
---- MODULE ModuleName ----
EXTENDS Naturals, Sequences, FiniteSets, TLC

CONSTANTS [Define any constants needed]

VARIABLES 
    [List all state variables from the code]

vars == <<[comma-separated list of all variables]>>

TypeInvariant == 
    [Define type constraints for all variables]

Init == 
    [Initialize all variables to appropriate starting values]

\* Action for each core function in the source code
FunctionName(parameters) ==
    [Translate function body to TLA+ operations]

Next == 
    \/ \E [parameters] : FunctionName([parameters])
    [Include ALL actions corresponding to core functions]

Spec == Init /\ [][Next]_vars

TypeOK == TypeInvariant

====
```

## Translation Guidelines:

1. **Variable Declarations**: 
   - Extract all class fields, global variables, and important local variables
   - Use appropriate TLA+ types (BOOLEAN, Nat, sequences, sets, records)

2. **Function Translation**:
   - Keep the same function name for the TLA+ action
   - Include function parameters as action parameters
   - Translate each statement in the function body
   - Use TLA+ assignment (variable' = value) for state changes

3. **Control Structures**:
   - Translate if-statements to IF-THEN-ELSE
   - Translate loops to recursive actions or non-deterministic choices
   - Translate switch/case to nested IF-THEN-ELSE

4. **Data Structures**:
   - Arrays → TLA+ sequences
   - Lists → TLA+ sequences  
   - Sets → TLA+ sets
   - Objects/Structs → TLA+ records
   - Maps/Dictionaries → TLA+ functions

## Function Classification Guidelines:

**CORE Functions (Model as Actions):**
- Main business logic operations (e.g., lock/unlock, leader election, log append)
- State transition functions that change critical system state
- Protocol-specific operations (e.g., vote handling, heartbeat processing)

**HELPER Functions (Abstract/Simplify):**
- Message creation and parsing functions → Abstract as simple assignments
- Data structure manipulation → Use TLA+ built-in operations
- Validation and checking functions → Combine into preconditions

**INFRASTRUCTURE Functions (Omit Completely):**
- Logging functions (log, debug, trace, etc.)
- Metrics and monitoring functions
- Configuration and setup functions

## Source Code to Analyze:

{source_code}

## Instructions:

1. **Analyze and Categorize**: Examine the source code and categorize each function into CORE, HELPER, or INFRASTRUCTURE.

2. **Focus on Core Logic**: Extract state variables and data structures essential to the CORE functionality only.

3. **Create Complete TLA+ Specification**: 
   - Model ALL CORE functions as TLA+ actions with the same names
   - For distributed systems: Ensure BOTH consensus/election AND data replication are fully represented
   - Abstract HELPER functions appropriately
   - Omit INFRASTRUCTURE functions completely

4. **Ensure System Completeness**: Verify that all major subsystems are represented in the specification.

Generate the complete TLA+ specification:

**IMPORTANT: Return ONLY the TLA+ code. Do not include any natural language explanations, comments about the translation process, or markdown formatting. Start directly with the module declaration and end with the module terminator.** 