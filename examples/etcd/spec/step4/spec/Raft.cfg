\* TLA+ Configuration file for Raft specification
\* This file defines constants, specification, invariants and properties for model checking

\* ========== CONSTANTS ==========
\* Define the set of servers (nodes) in the Raft cluster
CONSTANTS
    Server = {s1, s2, s3}
    Value = {v1, v2}
    Nil = Nil
    NoLimit = 5

CHECK_DEADLOCK 
  FALSE 

\* ========== INVARIANTS ==========
\* Critical safety properties that must always hold
INVARIANTS
    TypeOK                    \* Type safety
    LeaderElectionSafety      \* At most one leader per term
    LogMatching               \* Log consistency across servers
    LeaderCompleteness        \* Leader election progress
    StateConstraints          \* State consistency
    TermConstraints           \* Term number consistency

\* ========== PROPERTIES ==========
\* Liveness properties to verify system progress
PROPERTIES
    \* Leader election progress: eventually a leader will be elected
    \E s \in Server : \E t \in Nat : 
        (state[s] = "Leader" /\ currentTerm[s] = t)
    
    \* Log replication progress: committed entries eventually replicated
    \A s \in Server : \A i \in 1..Len(log[s]) :
        (commitIndex[s] >= i) => 
            \E s2 \in Server : (matchIndex[s2][s] >= i)

\* ========== SPECIFICATION ==========
\* The temporal logic specification to check
SPECIFICATION Spec

\* ========== BOUNDS ==========
\* Model checking bounds to prevent state explosion
\* These can be adjusted based on available memory and time
\* Current bounds are conservative for safety
\* Increase bounds for more thorough verification
\* 
\* Note: The current bounds may be too restrictive for full verification
\* Consider running with larger bounds on high-memory systems
\* 
\* For production use, consider:
\* - Server: {s1, s2, s3, s4, s5} for 5-node clusters
\* - Value: {v1, v2, v3, v4, v5} for more diverse values
\* - Log length bounds: Adjust based on expected log sizes